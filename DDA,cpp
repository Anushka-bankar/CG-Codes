//DDA Line
#include <iostream>
#include <GL/glut.h>
using namespace std;
int x1, y1, x2, y2;
int lineType;
int Round(float a) { //Casting 
    return (int)(a + 0.5);
}
void ddaline(int x1, int y1, int x2, int y2, int lineType) {
    int dx, dy, steps;
    dx = x2 - x1;
    dy = y2 - y1;
    if (abs(dx) > abs(dy)) {
        steps = abs(dx);
    } else {
        steps = abs(dy);
    }
    float xincrement, yincrement;
    xincrement = dx / (float)(steps);
    yincrement = dy / (float)(steps);
    float x = x1;
    float y = y1;
    glBegin(GL_POINTS);
    glVertex2d(Round(x), Round(y));
    for(int k = 0; k < steps; k++) {
        if (lineType == 4) {
            glPointSize(3.0);
            x += xincrement;
            y += yincrement;
            glVertex2d(Round(x), Round(y));
        } else if (lineType == 3) {
            if (k % 4 != 0) {
                glVertex2d(Round(x), Round(y));
            }
            x += xincrement;
            y += yincrement;
            } else if (lineType == 2) {
            if (k % 4 == 0) {
                glVertex2d(Round(x), Round(y));
            }
            x += xincrement;
            y += yincrement;
            } else {
                x += xincrement;
                y += yincrement;
                glVertex2d(Round(x), Round(y));
            }
    }
    glEnd();
    glFlush();
}

void mouse1(int button, int state, int x, int y) {
    y = 480 - y;
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        x1 = x;
        y1 = y;
    }
    if (button == GLUT_LEFT_BUTTON && state == GLUT_UP) {
        x2 = x;
        y2 = y;
        glColor3f(1.0, 0.0, 0.0);
        ddaline(x1, y1, x2, y2, lineType);
    }
}
void Draw() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 1.0, 0.0);
    ddaline(0, 240, 640, 240, 1);
    ddaline(320, 0, 320, 480, 1);
}

int main(int argc, char **argv)
{
    cout << "Enter what type of line to draw (1. Simple 2. Dotted 3. Dashed 4. Solid): ";
    cin >> lineType;
    cout << "Drag a line across the screen";
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(640, 480);
    glutCreateWindow("DDA Line");
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glColor3f(1.0, 0.0, 0.0);
    gluOrtho2D(0, 640, 0, 480);
    glutDisplayFunc(Draw);
    glutMouseFunc(mouse1);
    glutMainLoop();
    return 0;
}
